image: jonoh/docker-buildx-qemu@sha256:4fc5868d90c146563dace436cb1b850c2bd8055ff2e7d9d53fb4a83a7dc2969e

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  INDEV_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/indev:trunk_CI-${CI_PIPELINE_ID}"

# Build
.install_buildx_template: &build_generic
  stage: build
  script:
    - update-binfmts --enable
    - docker buildx create --use
    - docker buildx inspect --bootstrap
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - export NEW_IMAGE_NAME="${INDEV_IMAGE_NAME}-${BUILD_ARCH_NICE}" && echo $NEW_IMAGE_NAME
    - docker buildx build --cache-from="$NEW_IMAGE_NAME" --push --platform "${BUILD_ARCH}" -t "$NEW_IMAGE_NAME" ./docker/moos-ivp
    - echo "Checking for existance of image ${INDEV_IMAGE_NAME}"
    - docker buildx imagetools inspect "${INDEV_IMAGE_NAME}" || export IMAGE_EXISTS="false"
    - if [[ "$IMAGE_EXISTS" == "false" ]]; then echo "Creating image..."; docker buildx imagetools create -t "${INDEV_IMAGE_NAME}" "$NEW_IMAGE_NAME"; fi
    - if [[ "$IMAGE_EXISTS" != "false" ]]; then echo "Appending to image..."; docker buildx imagetools create --append -t "${INDEV_IMAGE_NAME}" "$NEW_IMAGE_NAME"; fi


build-ivp:amd64:
  timeout: 1h
  variables:
    BUILD_ARCH: linux/amd64
    BUILD_ARCH_NICE: "amd64"
  <<: *build_generic

build-ivp:arm64:
  timeout: 3h
  variables:
    BUILD_ARCH: linux/arm64
    BUILD_ARCH_NICE: "arm64"
  <<: *build_generic

build-ivp:armv7:
  timeout: 3h
  variables:
    BUILD_ARCH: linux/arm/v7
    BUILD_ARCH_NICE: "armv7"
  <<: *build_generic
    
# Test
.test_common: &test_common
  stage: test
  image: "${INDEV_IMAGE_NAME}"
  allow_failure: true
  variables:
    - GIT_STRATEGY: none
  before_script:
    - cd $HOME
    - ls
    - cd moos-ivp/

test-build-check:
  <<: *test_common
  script:
    - ./build-check.sh

test-unit-tests:
  <<: *test_common
  script:
    - ./build-utests.sh
    - cd ivp/src_unit_tests/
    - ./alltest.sh

# Deploy
.before_script_template: &deploy_generic
  stage: deploy
  except:
    - merge_requests
    - external_pull_requests
  script:
    - SVN_REV="r$(docker run --rm $INDEV_IMAGE_NAME svn info --show-item revision moos-ivp)" && export SVN_REV
    - echo "$REGISTRY_PASSWD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY_URL
    - docker tag $INDEV_IMAGE_NAME ${REPO_PATH}:${SVN_REV}
    - docker tag $INDEV_IMAGE_NAME ${REPO_PATH}:trunk
    - docker push ${REPO_PATH}:${SVN_REV}
    - docker push ${REPO_PATH}:trunk

.deploy_generic_manifest: &deploy_generic_manifest
  stage: deploy
  except:
    - merge_requests
    - external_pull_requests
  script:
    - export SVN_REV="r$(docker run --rm ${INDEV_IMAGE_NAME} svn info --show-item revision moos-ivp)" && echo $SVN_REV
    - export CI_MANIFEST_LIST="${INDEV_IMAGE_REGISTRY}:${INDEV_IMAGE_TAG}-amd64 ${INDEV_IMAGE_REGISTRY}:${INDEV_IMAGE_TAG}-arm64 ${INDEV_IMAGE_REGISTRY}:${INDEV_IMAGE_TAG}-armv7" && echo "$CI_MANIFEST_LIST"
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - echo "$REGISTRY_PASSWD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY_URL
    - docker manifest create ${REPO_PATH}:${SVN_REV} $CI_MANIFEST_LIST
    - docker manifest create ${REPO_PATH}:trunk $CI_MANIFEST_LIST
    - docker manifest push ${REPO_PATH}:${SVN_REV}
    - docker manifest push ${REPO_PATH}:trunk

deploy-gitlab-registry:
  variables:
    REGISTRY_URL: "$CI_REGISTRY"
    REGISTRY_USER: "$CI_REGISTRY_USER"
    REGISTRY_PASSWD: "$CI_REGISTRY_PASSWORD"
    REPO_PATH: "$CI_REGISTRY_IMAGE"
  <<: *deploy_generic

deploy-docker-hub-registry:
  only:
    refs:
      - master
      - schedules
  variables:
    REGISTRY_URL: "docker.io"
    REGISTRY_USER: "$DOCKER_HUB_USERNAME"
    REGISTRY_PASSWD: "$DOCKER_HUB_PUSH_KEY"
    REPO_PATH: "${REGISTRY_URL}/moosivp/moos-ivp"
  <<: *deploy_generic
