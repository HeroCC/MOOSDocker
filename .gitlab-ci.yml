image: jonoh/docker-buildx-qemu@sha256:4fc5868d90c146563dace436cb1b850c2bd8055ff2e7d9d53fb4a83a7dc2969e

#workflow:
#  rules:
#    - if: '$CI_COMMIT_MESSAGE =~ /no-docker-build$/ && $CI_PIPELINE_SOURCE == "push"'
#      when: never

services:
  - name: docker:20.10-dind

stages:
  - build
  - build-gui
  - test
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: "/certs"
  DEPLOY_ARCHS: "amd64 armv7"
  INDEV_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/indev:trunk_CI-${CI_PIPELINE_ID}"

# Build
.build_generic:
  retry: 2
  script:
    - update-binfmts --enable
    - docker buildx create --use
    - docker buildx inspect --bootstrap
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - export NEW_IMAGE_NAME="${INDEV_IMAGE_NAME}-${BUILD_ARCH_NICE}${TAG_EXTRAS}" && echo $NEW_IMAGE_NAME
    - if [[ -n "${SVN_REVISION}" ]]; then export BUILD_EXTRAS="--build-arg SVN_REV=${SVN_REVISION} $BUILD_EXTRAS"; fi
    - echo "Build Extras -> $BUILD_EXTRAS"
    - echo "Tag Extras -> $TAG_EXTRAS"
    - docker buildx build ${BUILD_EXTRAS} --push --platform "${BUILD_ARCH}" -t "$NEW_IMAGE_NAME" "./docker/moos-ivp${TAG_EXTRAS}"
    - echo "Checking for existance of image ${INDEV_IMAGE_NAME}"
    - docker buildx imagetools inspect "${INDEV_IMAGE_NAME}${TAG_EXTRAS}" || export IMAGE_EXISTS="false"
    - if [[ "$IMAGE_EXISTS" == "false" ]]; then echo "Creating image..."; docker buildx imagetools create -t "${INDEV_IMAGE_NAME}${TAG_EXTRAS}" "$NEW_IMAGE_NAME"; fi
    - if [[ "$IMAGE_EXISTS" != "false" ]]; then echo "Appending to image..."; docker buildx imagetools create --append -t "${INDEV_IMAGE_NAME}${TAG_EXTRAS}" "$NEW_IMAGE_NAME"; fi


build-ivp-amd64:
  stage: build
  timeout: 1h
  extends: .build_generic
  variables:
    BUILD_ARCH: linux/amd64
    BUILD_ARCH_NICE: "amd64"

# build-ivp-arm64:
#   stage: build
#   timeout: 4h
#   extends: .build_generic
#   variables:
#     BUILD_ARCH: linux/arm64
#     BUILD_ARCH_NICE: "arm64"

build-ivp-armv7:
  stage: build
  timeout: 4h
  extends: .build_generic
  variables:
    BUILD_ARCH: linux/arm/v7
    BUILD_ARCH_NICE: "armv7"

build-ivp-amd64-gui:
  stage: build-gui
  extends: build-ivp-amd64
  needs:
    - build-ivp-amd64
  before_script:
     # GitLab doesn't expand variables containing variables, so we need to do it here
     # https://docs.gitlab.com/ee/ci/variables/where_variables_can_be_used.html#expansion-mechanisms
    - export BUILD_EXTRAS="$BUILD_EXTRAS --build-arg FROM=${INDEV_IMAGE_NAME}"
  variables:
    TAG_EXTRAS: "-gui"

# build-ivp-arm64-gui:
#   stage: build-gui
#   extends: build-ivp-arm64
#   before_script:
#     - export BUILD_EXTRAS="$BUILD_EXTRAS --build-arg FROM=${INDEV_IMAGE_NAME}"
#   variables:
#     TAG_EXTRAS: "-gui"

build-ivp-armv7-gui:
  stage: build-gui
  extends: build-ivp-armv7
  before_script:
    - export BUILD_EXTRAS="$BUILD_EXTRAS --build-arg FROM=${INDEV_IMAGE_NAME}"
  variables:
    TAG_EXTRAS: "-gui"

    
# Test
.test_common:
  stage: test
  image: "${INDEV_IMAGE_NAME}-gui"
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  before_script:
    - cd $HOME
    - ls
    - cd moos-ivp/

test-build-check:
  extends: .test_common
  script:
    - ./build-check.sh

test-unit-tests:
  extends: .test_common
  script:
    - ./build-utests.sh
    - cd ivp/src_unit_tests/
    - ./alltest.sh

# Deploy
.deploy_generic_manifest:
  stage: deploy
  except:
   - merge_requests
   - external_pull_requests
  before_script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - export REVISION="r$(docker run --rm ${INDEV_IMAGE_NAME} svn info --show-item revision moos-ivp)" && echo $REVISION
    - echo "Tag Extras -> ${TAG_EXTRAS}"
    - echo "$REGISTRY_PASSWD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY_URL
  script:
    # TODO dynamically get matching tags via registry API
    - >
        for arch in $DEPLOY_ARCHS; do
          NEW_IMAGE_NAME="${REPO_PATH}:${REVISION}-${arch}${TAG_EXTRAS}"
          docker pull "${INDEV_IMAGE_NAME}-${arch}${TAG_EXTRAS}"
          docker tag "${INDEV_IMAGE_NAME}-${arch}${TAG_EXTRAS}" "${NEW_IMAGE_NAME}"
          docker push "${NEW_IMAGE_NAME}"
          export IMAGES="$IMAGES ${NEW_IMAGE_NAME}"
        done
    - docker manifest create ${REPO_PATH}:${REVISION}${TAG_EXTRAS} ${IMAGES}
    - docker manifest push --purge ${REPO_PATH}:${REVISION}${TAG_EXTRAS}
    - > 
        if [[ -z "$NO_TRUNK_LABEL" ]]; then
          docker manifest create ${REPO_PATH}:trunk${TAG_EXTRAS} ${IMAGES}
          docker manifest push --purge ${REPO_PATH}:trunk${TAG_EXTRAS}
        fi

deploy-gitlab-registry:
  extends: .deploy_generic_manifest
  variables:
    REGISTRY_URL: "$CI_REGISTRY"
    REGISTRY_USER: "$CI_REGISTRY_USER"
    REGISTRY_PASSWD: "$CI_REGISTRY_PASSWORD"
    REPO_PATH: "$CI_REGISTRY_IMAGE"

deploy-gitlab-registry-gui:
  extends: deploy-gitlab-registry
  variables:
    TAG_EXTRAS: "-gui"

deploy-docker-hub-registry:
  extends: .deploy_generic_manifest
  only:
    refs:
      - master
      - schedules
  variables:
    REGISTRY_URL: "docker.io"
    REGISTRY_USER: "$DOCKER_HUB_USERNAME"
    REGISTRY_PASSWD: "$DOCKER_HUB_PUSH_KEY"
    REPO_PATH: "${REGISTRY_URL}/moosivp/moos-ivp"

deploy-docker-hub-registry-gui:
  extends: deploy-docker-hub-registry
  variables:
    TAG_EXTRAS: "-gui"

deploy-quay-registry:
  extends: .deploy_generic_manifest
  only:
    refs:
      - master
      - schedules
  variables:
    REGISTRY_URL: "quay.io"
    REGISTRY_USER: "$QUAY_USERNAME"
    REGISTRY_PASSWD: "$QUAY_PUSH_KEY"
    REPO_PATH: "${REGISTRY_URL}/moosivp/moos-ivp"

deploy-quay-registry-gui:
  extends: deploy-quay-registry
  variables:
    TAG_EXTRAS: "-gui"
